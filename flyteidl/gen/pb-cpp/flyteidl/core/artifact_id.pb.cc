// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/artifact_id.proto

#include "flyteidl/core/artifact_id.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Partitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fartifact_5fid_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace core {
class ArtifactKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactKey> _instance;
} _ArtifactKey_default_instance_;
class ArtifactBindingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactBindingData> _instance;
  ::google::protobuf::internal::ArenaStringPtr partition_key_;
  bool bind_to_time_partition_;
} _ArtifactBindingData_default_instance_;
class InputBindingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputBindingData> _instance;
} _InputBindingData_default_instance_;
class LabelValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelValue> _instance;
  ::google::protobuf::internal::ArenaStringPtr static_value_;
  const ::google::protobuf::Timestamp* time_value_;
  const ::flyteidl::core::ArtifactBindingData* triggered_binding_;
  const ::flyteidl::core::InputBindingData* input_binding_;
} _LabelValue_default_instance_;
class Partitions_ValueEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Partitions_ValueEntry_DoNotUse> _instance;
} _Partitions_ValueEntry_DoNotUse_default_instance_;
class PartitionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Partitions> _instance;
} _Partitions_default_instance_;
class TimePartitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimePartition> _instance;
} _TimePartition_default_instance_;
class ArtifactIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactID> _instance;
} _ArtifactID_default_instance_;
class ArtifactTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactTag> _instance;
} _ArtifactTag_default_instance_;
class ArtifactQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactQuery> _instance;
  const ::flyteidl::core::ArtifactID* artifact_id_;
  const ::flyteidl::core::ArtifactTag* artifact_tag_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  const ::flyteidl::core::ArtifactBindingData* binding_;
} _ArtifactQuery_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ArtifactKey_default_instance_;
    new (ptr) ::flyteidl::core::ArtifactKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ArtifactKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto}, {}};

static void InitDefaultsArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ArtifactBindingData_default_instance_;
    new (ptr) ::flyteidl::core::ArtifactBindingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ArtifactBindingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto}, {}};

static void InitDefaultsInputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_InputBindingData_default_instance_;
    new (ptr) ::flyteidl::core::InputBindingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::InputBindingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto}, {}};

static void InitDefaultsLabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_LabelValue_default_instance_;
    new (ptr) ::flyteidl::core::LabelValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::LabelValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsPartitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Partitions_ValueEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::Partitions_ValueEntry_DoNotUse();
  }
  ::flyteidl::core::Partitions_ValueEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Partitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsPartitions_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Partitions_default_instance_;
    new (ptr) ::flyteidl::core::Partitions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Partitions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartitions_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_Partitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsTimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TimePartition_default_instance_;
    new (ptr) ::flyteidl::core::TimePartition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TimePartition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ArtifactID_default_instance_;
    new (ptr) ::flyteidl::core::ArtifactID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ArtifactID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ArtifactTag_default_instance_;
    new (ptr) ::flyteidl::core::ArtifactTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ArtifactTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

static void InitDefaultsArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ArtifactQuery_default_instance_;
    new (ptr) ::flyteidl::core::ArtifactQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ArtifactQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto.base,
      &scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base,}};

void InitDefaults_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Partitions_ValueEntry_DoNotUse_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[10];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fcore_2fartifact_5fid_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fartifact_5fid_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2fartifact_5fid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactKey, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactKey, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactKey, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactBindingData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactBindingData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactBindingData, index_),
  offsetof(::flyteidl::core::ArtifactBindingDataDefaultTypeInternal, partition_key_),
  offsetof(::flyteidl::core::ArtifactBindingDataDefaultTypeInternal, bind_to_time_partition_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactBindingData, transform_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactBindingData, partition_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::InputBindingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::InputBindingData, var_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LabelValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LabelValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::LabelValueDefaultTypeInternal, static_value_),
  offsetof(::flyteidl::core::LabelValueDefaultTypeInternal, time_value_),
  offsetof(::flyteidl::core::LabelValueDefaultTypeInternal, triggered_binding_),
  offsetof(::flyteidl::core::LabelValueDefaultTypeInternal, input_binding_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LabelValue, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions_ValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions_ValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions_ValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions_ValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Partitions, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TimePartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TimePartition, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactID, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactID, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactID, partitions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactID, time_partition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactTag, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactTag, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactQuery, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::ArtifactQueryDefaultTypeInternal, artifact_id_),
  offsetof(::flyteidl::core::ArtifactQueryDefaultTypeInternal, artifact_tag_),
  offsetof(::flyteidl::core::ArtifactQueryDefaultTypeInternal, uri_),
  offsetof(::flyteidl::core::ArtifactQueryDefaultTypeInternal, binding_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ArtifactQuery, identifier_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::ArtifactKey)},
  { 8, -1, sizeof(::flyteidl::core::ArtifactBindingData)},
  { 18, -1, sizeof(::flyteidl::core::InputBindingData)},
  { 24, -1, sizeof(::flyteidl::core::LabelValue)},
  { 34, 41, sizeof(::flyteidl::core::Partitions_ValueEntry_DoNotUse)},
  { 43, -1, sizeof(::flyteidl::core::Partitions)},
  { 49, -1, sizeof(::flyteidl::core::TimePartition)},
  { 55, -1, sizeof(::flyteidl::core::ArtifactID)},
  { 64, -1, sizeof(::flyteidl::core::ArtifactTag)},
  { 71, -1, sizeof(::flyteidl::core::ArtifactQuery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ArtifactKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ArtifactBindingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_InputBindingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_LabelValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Partitions_ValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Partitions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TimePartition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ArtifactID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ArtifactTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ArtifactQuery_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2fartifact_5fid_2eproto, "flyteidl/core/artifact_id.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2fartifact_5fid_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto, 10, file_level_enum_descriptors_flyteidl_2fcore_2fartifact_5fid_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fartifact_5fid_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2fartifact_5fid_2eproto[] =
  "\n\037flyteidl/core/artifact_id.proto\022\rflyte"
  "idl.core\032\037google/protobuf/timestamp.prot"
  "o\032\036flyteidl/core/identifier.proto\"<\n\013Art"
  "ifactKey\022\017\n\007project\030\001 \001(\t\022\016\n\006domain\030\002 \001("
  "\t\022\014\n\004name\030\003 \001(\t\"\204\001\n\023ArtifactBindingData\022"
  "\r\n\005index\030\001 \001(\r\022\027\n\rpartition_key\030\002 \001(\tH\000\022"
  " \n\026bind_to_time_partition\030\003 \001(\010H\000\022\021\n\ttra"
  "nsform\030\004 \001(\tB\020\n\016partition_data\"\037\n\020InputB"
  "indingData\022\013\n\003var\030\001 \001(\t\"\332\001\n\nLabelValue\022\026"
  "\n\014static_value\030\001 \001(\tH\000\0220\n\ntime_value\030\002 \001"
  "(\0132\032.google.protobuf.TimestampH\000\022\?\n\021trig"
  "gered_binding\030\003 \001(\0132\".flyteidl.core.Arti"
  "factBindingDataH\000\0228\n\rinput_binding\030\004 \001(\013"
  "2\037.flyteidl.core.InputBindingDataH\000B\007\n\005v"
  "alue\"\212\001\n\nPartitions\0223\n\005value\030\001 \003(\0132$.fly"
  "teidl.core.Partitions.ValueEntry\032G\n\nValu"
  "eEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001(\0132\031.fly"
  "teidl.core.LabelValue:\0028\001\"9\n\rTimePartiti"
  "on\022(\n\005value\030\001 \001(\0132\031.flyteidl.core.LabelV"
  "alue\"\264\001\n\nArtifactID\0220\n\014artifact_key\030\001 \001("
  "\0132\032.flyteidl.core.ArtifactKey\022\017\n\007version"
  "\030\002 \001(\t\022-\n\npartitions\030\003 \001(\0132\031.flyteidl.co"
  "re.Partitions\0224\n\016time_partition\030\004 \001(\0132\034."
  "flyteidl.core.TimePartition\"i\n\013ArtifactT"
  "ag\0220\n\014artifact_key\030\001 \001(\0132\032.flyteidl.core"
  ".ArtifactKey\022(\n\005value\030\002 \001(\0132\031.flyteidl.c"
  "ore.LabelValue\"\311\001\n\rArtifactQuery\0220\n\013arti"
  "fact_id\030\001 \001(\0132\031.flyteidl.core.ArtifactID"
  "H\000\0222\n\014artifact_tag\030\002 \001(\0132\032.flyteidl.core"
  ".ArtifactTagH\000\022\r\n\003uri\030\003 \001(\tH\000\0225\n\007binding"
  "\030\004 \001(\0132\".flyteidl.core.ArtifactBindingDa"
  "taH\000B\014\n\nidentifierB<Z:github.com/flyteor"
  "g/flyte/flyteidl/gen/pb-go/flyteidl/core"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fartifact_5fid_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2fartifact_5fid_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2fartifact_5fid_2eproto,
  "flyteidl/core/artifact_id.proto", &assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto, 1328,
};

void AddDescriptors_flyteidl_2fcore_2fartifact_5fid_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2fartifact_5fid_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2fartifact_5fid_2eproto = []() { AddDescriptors_flyteidl_2fcore_2fartifact_5fid_2eproto(); return true; }();
namespace flyteidl {
namespace core {

// ===================================================================

void ArtifactKey::InitAsDefaultInstance() {
}
class ArtifactKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactKey::kProjectFieldNumber;
const int ArtifactKey::kDomainFieldNumber;
const int ArtifactKey::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactKey::ArtifactKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ArtifactKey)
}
ArtifactKey::ArtifactKey(const ArtifactKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ArtifactKey)
}

void ArtifactKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ArtifactKey::~ArtifactKey() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ArtifactKey)
  SharedDtor();
}

void ArtifactKey::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ArtifactKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactKey& ArtifactKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactKey_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void ArtifactKey::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ArtifactKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactKey.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactKey.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactKey.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ArtifactKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactKey.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactKey.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ArtifactKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ArtifactKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ArtifactKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ArtifactKey)
}

::google::protobuf::uint8* ArtifactKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ArtifactKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ArtifactKey)
  return target;
}

size_t ArtifactKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ArtifactKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ArtifactKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactKey* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ArtifactKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ArtifactKey)
    MergeFrom(*source);
  }
}

void ArtifactKey::MergeFrom(const ArtifactKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ArtifactKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ArtifactKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ArtifactKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactKey::CopyFrom(const ArtifactKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ArtifactKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactKey::IsInitialized() const {
  return true;
}

void ArtifactKey::Swap(ArtifactKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactKey::InternalSwap(ArtifactKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ArtifactKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactBindingData::InitAsDefaultInstance() {
  ::flyteidl::core::_ArtifactBindingData_default_instance_.partition_key_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::core::_ArtifactBindingData_default_instance_.bind_to_time_partition_ = false;
}
class ArtifactBindingData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactBindingData::kIndexFieldNumber;
const int ArtifactBindingData::kPartitionKeyFieldNumber;
const int ArtifactBindingData::kBindToTimePartitionFieldNumber;
const int ArtifactBindingData::kTransformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactBindingData::ArtifactBindingData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ArtifactBindingData)
}
ArtifactBindingData::ArtifactBindingData(const ArtifactBindingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transform().size() > 0) {
    transform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_);
  }
  index_ = from.index_;
  clear_has_partition_data();
  switch (from.partition_data_case()) {
    case kPartitionKey: {
      set_partition_key(from.partition_key());
      break;
    }
    case kBindToTimePartition: {
      set_bind_to_time_partition(from.bind_to_time_partition());
      break;
    }
    case PARTITION_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ArtifactBindingData)
}

void ArtifactBindingData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  transform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  clear_has_partition_data();
}

ArtifactBindingData::~ArtifactBindingData() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ArtifactBindingData)
  SharedDtor();
}

void ArtifactBindingData::SharedDtor() {
  transform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_partition_data()) {
    clear_partition_data();
  }
}

void ArtifactBindingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactBindingData& ArtifactBindingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void ArtifactBindingData::clear_partition_data() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.ArtifactBindingData)
  switch (partition_data_case()) {
    case kPartitionKey: {
      partition_data_.partition_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBindToTimePartition: {
      // No need to clear
      break;
    }
    case PARTITION_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARTITION_DATA_NOT_SET;
}


void ArtifactBindingData::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ArtifactBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  clear_partition_data();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactBindingData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactBindingData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string partition_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactBindingData.partition_key");
        object = msg->mutable_partition_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool bind_to_time_partition = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bind_to_time_partition(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string transform = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactBindingData.transform");
        object = msg->mutable_transform();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactBindingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ArtifactBindingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partition_key().data(), static_cast<int>(this->partition_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactBindingData.partition_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bind_to_time_partition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_partition_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partition_data_.bind_to_time_partition_)));
          set_has_bind_to_time_partition();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transform = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform().data(), static_cast<int>(this->transform().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactBindingData.transform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ArtifactBindingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ArtifactBindingData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactBindingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ArtifactBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // string partition_key = 2;
  if (has_partition_key()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key().data(), static_cast<int>(this->partition_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactBindingData.partition_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partition_key(), output);
  }

  // bool bind_to_time_partition = 3;
  if (has_bind_to_time_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bind_to_time_partition(), output);
  }

  // string transform = 4;
  if (this->transform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform().data(), static_cast<int>(this->transform().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactBindingData.transform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transform(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ArtifactBindingData)
}

::google::protobuf::uint8* ArtifactBindingData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ArtifactBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // string partition_key = 2;
  if (has_partition_key()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key().data(), static_cast<int>(this->partition_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactBindingData.partition_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partition_key(), target);
  }

  // bool bind_to_time_partition = 3;
  if (has_bind_to_time_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bind_to_time_partition(), target);
  }

  // string transform = 4;
  if (this->transform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform().data(), static_cast<int>(this->transform().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactBindingData.transform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->transform(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ArtifactBindingData)
  return target;
}

size_t ArtifactBindingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ArtifactBindingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transform = 4;
  if (this->transform().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  switch (partition_data_case()) {
    // string partition_key = 2;
    case kPartitionKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partition_key());
      break;
    }
    // bool bind_to_time_partition = 3;
    case kBindToTimePartition: {
      total_size += 1 + 1;
      break;
    }
    case PARTITION_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactBindingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ArtifactBindingData)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactBindingData* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactBindingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ArtifactBindingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ArtifactBindingData)
    MergeFrom(*source);
  }
}

void ArtifactBindingData::MergeFrom(const ArtifactBindingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ArtifactBindingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transform().size() > 0) {

    transform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  switch (from.partition_data_case()) {
    case kPartitionKey: {
      set_partition_key(from.partition_key());
      break;
    }
    case kBindToTimePartition: {
      set_bind_to_time_partition(from.bind_to_time_partition());
      break;
    }
    case PARTITION_DATA_NOT_SET: {
      break;
    }
  }
}

void ArtifactBindingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ArtifactBindingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactBindingData::CopyFrom(const ArtifactBindingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ArtifactBindingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactBindingData::IsInitialized() const {
  return true;
}

void ArtifactBindingData::Swap(ArtifactBindingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactBindingData::InternalSwap(ArtifactBindingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transform_.Swap(&other->transform_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(partition_data_, other->partition_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ArtifactBindingData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InputBindingData::InitAsDefaultInstance() {
}
class InputBindingData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputBindingData::kVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputBindingData::InputBindingData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.InputBindingData)
}
InputBindingData::InputBindingData(const InputBindingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.var().size() > 0) {
    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.InputBindingData)
}

void InputBindingData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InputBindingData::~InputBindingData() {
  // @@protoc_insertion_point(destructor:flyteidl.core.InputBindingData)
  SharedDtor();
}

void InputBindingData::SharedDtor() {
  var_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InputBindingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputBindingData& InputBindingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InputBindingData_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void InputBindingData::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.InputBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputBindingData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InputBindingData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string var = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.InputBindingData.var");
        object = msg->mutable_var();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputBindingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.InputBindingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string var = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->var().data(), static_cast<int>(this->var().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.InputBindingData.var"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.InputBindingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.InputBindingData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputBindingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.InputBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.InputBindingData.var");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.InputBindingData)
}

::google::protobuf::uint8* InputBindingData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.InputBindingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.InputBindingData.var");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.InputBindingData)
  return target;
}

size_t InputBindingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.InputBindingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->var());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputBindingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.InputBindingData)
  GOOGLE_DCHECK_NE(&from, this);
  const InputBindingData* source =
      ::google::protobuf::DynamicCastToGenerated<InputBindingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.InputBindingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.InputBindingData)
    MergeFrom(*source);
  }
}

void InputBindingData::MergeFrom(const InputBindingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.InputBindingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.var().size() > 0) {

    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
}

void InputBindingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.InputBindingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputBindingData::CopyFrom(const InputBindingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.InputBindingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBindingData::IsInitialized() const {
  return true;
}

void InputBindingData::Swap(InputBindingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputBindingData::InternalSwap(InputBindingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  var_.Swap(&other->var_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata InputBindingData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LabelValue::InitAsDefaultInstance() {
  ::flyteidl::core::_LabelValue_default_instance_.static_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::core::_LabelValue_default_instance_.time_value_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::core::_LabelValue_default_instance_.triggered_binding_ = const_cast< ::flyteidl::core::ArtifactBindingData*>(
      ::flyteidl::core::ArtifactBindingData::internal_default_instance());
  ::flyteidl::core::_LabelValue_default_instance_.input_binding_ = const_cast< ::flyteidl::core::InputBindingData*>(
      ::flyteidl::core::InputBindingData::internal_default_instance());
}
class LabelValue::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& time_value(const LabelValue* msg);
  static const ::flyteidl::core::ArtifactBindingData& triggered_binding(const LabelValue* msg);
  static const ::flyteidl::core::InputBindingData& input_binding(const LabelValue* msg);
};

const ::google::protobuf::Timestamp&
LabelValue::HasBitSetters::time_value(const LabelValue* msg) {
  return *msg->value_.time_value_;
}
const ::flyteidl::core::ArtifactBindingData&
LabelValue::HasBitSetters::triggered_binding(const LabelValue* msg) {
  return *msg->value_.triggered_binding_;
}
const ::flyteidl::core::InputBindingData&
LabelValue::HasBitSetters::input_binding(const LabelValue* msg) {
  return *msg->value_.input_binding_;
}
void LabelValue::set_allocated_time_value(::google::protobuf::Timestamp* time_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (time_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_value)->GetArena();
    if (message_arena != submessage_arena) {
      time_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_value, submessage_arena);
    }
    set_has_time_value();
    value_.time_value_ = time_value;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LabelValue.time_value)
}
void LabelValue::clear_time_value() {
  if (has_time_value()) {
    delete value_.time_value_;
    clear_has_value();
  }
}
void LabelValue::set_allocated_triggered_binding(::flyteidl::core::ArtifactBindingData* triggered_binding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (triggered_binding) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      triggered_binding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, triggered_binding, submessage_arena);
    }
    set_has_triggered_binding();
    value_.triggered_binding_ = triggered_binding;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LabelValue.triggered_binding)
}
void LabelValue::set_allocated_input_binding(::flyteidl::core::InputBindingData* input_binding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (input_binding) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_binding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_binding, submessage_arena);
    }
    set_has_input_binding();
    value_.input_binding_ = input_binding;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LabelValue.input_binding)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelValue::kStaticValueFieldNumber;
const int LabelValue::kTimeValueFieldNumber;
const int LabelValue::kTriggeredBindingFieldNumber;
const int LabelValue::kInputBindingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelValue::LabelValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.LabelValue)
}
LabelValue::LabelValue(const LabelValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStaticValue: {
      set_static_value(from.static_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::protobuf::Timestamp::MergeFrom(from.time_value());
      break;
    }
    case kTriggeredBinding: {
      mutable_triggered_binding()->::flyteidl::core::ArtifactBindingData::MergeFrom(from.triggered_binding());
      break;
    }
    case kInputBinding: {
      mutable_input_binding()->::flyteidl::core::InputBindingData::MergeFrom(from.input_binding());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.LabelValue)
}

void LabelValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  clear_has_value();
}

LabelValue::~LabelValue() {
  // @@protoc_insertion_point(destructor:flyteidl.core.LabelValue)
  SharedDtor();
}

void LabelValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void LabelValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelValue& LabelValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LabelValue_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void LabelValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.LabelValue)
  switch (value_case()) {
    case kStaticValue: {
      value_.static_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTimeValue: {
      delete value_.time_value_;
      break;
    }
    case kTriggeredBinding: {
      delete value_.triggered_binding_;
      break;
    }
    case kInputBinding: {
      delete value_.input_binding_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void LabelValue::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LabelValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LabelValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string static_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.LabelValue.static_value");
        object = msg->mutable_static_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp time_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_time_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ArtifactBindingData triggered_binding = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactBindingData::_InternalParse;
        object = msg->mutable_triggered_binding();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.InputBindingData input_binding = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::InputBindingData::_InternalParse;
        object = msg->mutable_input_binding();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LabelValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.LabelValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string static_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_static_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->static_value().data(), static_cast<int>(this->static_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.LabelValue.static_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactBindingData triggered_binding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_triggered_binding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.InputBindingData input_binding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_binding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.LabelValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.LabelValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LabelValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string static_value = 1;
  if (has_static_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->static_value().data(), static_cast<int>(this->static_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.LabelValue.static_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->static_value(), output);
  }

  // .google.protobuf.Timestamp time_value = 2;
  if (has_time_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::time_value(this), output);
  }

  // .flyteidl.core.ArtifactBindingData triggered_binding = 3;
  if (has_triggered_binding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::triggered_binding(this), output);
  }

  // .flyteidl.core.InputBindingData input_binding = 4;
  if (has_input_binding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::input_binding(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.LabelValue)
}

::google::protobuf::uint8* LabelValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string static_value = 1;
  if (has_static_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->static_value().data(), static_cast<int>(this->static_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.LabelValue.static_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->static_value(), target);
  }

  // .google.protobuf.Timestamp time_value = 2;
  if (has_time_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::time_value(this), target);
  }

  // .flyteidl.core.ArtifactBindingData triggered_binding = 3;
  if (has_triggered_binding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::triggered_binding(this), target);
  }

  // .flyteidl.core.InputBindingData input_binding = 4;
  if (has_input_binding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::input_binding(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.LabelValue)
  return target;
}

size_t LabelValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.LabelValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string static_value = 1;
    case kStaticValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->static_value());
      break;
    }
    // .google.protobuf.Timestamp time_value = 2;
    case kTimeValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.time_value_);
      break;
    }
    // .flyteidl.core.ArtifactBindingData triggered_binding = 3;
    case kTriggeredBinding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.triggered_binding_);
      break;
    }
    // .flyteidl.core.InputBindingData input_binding = 4;
    case kInputBinding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.input_binding_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.LabelValue)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelValue* source =
      ::google::protobuf::DynamicCastToGenerated<LabelValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.LabelValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.LabelValue)
    MergeFrom(*source);
  }
}

void LabelValue::MergeFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.LabelValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStaticValue: {
      set_static_value(from.static_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::protobuf::Timestamp::MergeFrom(from.time_value());
      break;
    }
    case kTriggeredBinding: {
      mutable_triggered_binding()->::flyteidl::core::ArtifactBindingData::MergeFrom(from.triggered_binding());
      break;
    }
    case kInputBinding: {
      mutable_input_binding()->::flyteidl::core::InputBindingData::MergeFrom(from.input_binding());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void LabelValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.LabelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelValue::CopyFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.LabelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelValue::IsInitialized() const {
  return true;
}

void LabelValue::Swap(LabelValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelValue::InternalSwap(LabelValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LabelValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

Partitions_ValueEntry_DoNotUse::Partitions_ValueEntry_DoNotUse() {}
Partitions_ValueEntry_DoNotUse::Partitions_ValueEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Partitions_ValueEntry_DoNotUse::MergeFrom(const Partitions_ValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Partitions_ValueEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[4];
}
void Partitions_ValueEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Partitions_ValueEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Partitions_ValueEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.Partitions.ValueEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Partitions::InitAsDefaultInstance() {
}
class Partitions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Partitions::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Partitions::Partitions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Partitions)
}
Partitions::Partitions(const Partitions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.MergeFrom(from.value_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Partitions)
}

void Partitions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
}

Partitions::~Partitions() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Partitions)
  SharedDtor();
}

void Partitions::SharedDtor() {
}

void Partitions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Partitions& Partitions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Partitions_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void Partitions::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Partitions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Partitions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Partitions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, .flyteidl.core.LabelValue> value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::Partitions_ValueEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->value_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Partitions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Partitions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .flyteidl.core.LabelValue> value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Partitions_ValueEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Partitions_ValueEntry_DoNotUse,
              ::std::string, ::flyteidl::core::LabelValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue > > parser(&value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Partitions.ValueEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Partitions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Partitions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Partitions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Partitions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flyteidl.core.LabelValue> value = 1;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.Partitions.ValueEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Partitions_ValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Partitions_ValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Partitions)
}

::google::protobuf::uint8* Partitions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Partitions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flyteidl.core.LabelValue> value = 1;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.Partitions.ValueEntry.key");
      }
    };

    if (false &&
        this->value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Partitions_ValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Partitions_ValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Partitions)
  return target;
}

size_t Partitions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Partitions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flyteidl.core.LabelValue> value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  {
    ::std::unique_ptr<Partitions_ValueEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::core::LabelValue >::const_iterator
        it = this->value().begin();
        it != this->value().end(); ++it) {
      entry.reset(value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Partitions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Partitions)
  GOOGLE_DCHECK_NE(&from, this);
  const Partitions* source =
      ::google::protobuf::DynamicCastToGenerated<Partitions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Partitions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Partitions)
    MergeFrom(*source);
  }
}

void Partitions::MergeFrom(const Partitions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Partitions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Partitions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Partitions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partitions::CopyFrom(const Partitions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Partitions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partitions::IsInitialized() const {
  return true;
}

void Partitions::Swap(Partitions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Partitions::InternalSwap(Partitions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_);
}

::google::protobuf::Metadata Partitions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimePartition::InitAsDefaultInstance() {
  ::flyteidl::core::_TimePartition_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::LabelValue*>(
      ::flyteidl::core::LabelValue::internal_default_instance());
}
class TimePartition::HasBitSetters {
 public:
  static const ::flyteidl::core::LabelValue& value(const TimePartition* msg);
};

const ::flyteidl::core::LabelValue&
TimePartition::HasBitSetters::value(const TimePartition* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePartition::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePartition::TimePartition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TimePartition)
}
TimePartition::TimePartition(const TimePartition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::flyteidl::core::LabelValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TimePartition)
}

void TimePartition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  value_ = nullptr;
}

TimePartition::~TimePartition() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TimePartition)
  SharedDtor();
}

void TimePartition::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void TimePartition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimePartition& TimePartition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimePartition_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void TimePartition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TimePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimePartition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimePartition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.LabelValue value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LabelValue::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimePartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TimePartition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.LabelValue value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TimePartition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TimePartition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimePartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TimePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LabelValue value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TimePartition)
}

::google::protobuf::uint8* TimePartition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TimePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LabelValue value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TimePartition)
  return target;
}

size_t TimePartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TimePartition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.LabelValue value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimePartition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TimePartition)
  GOOGLE_DCHECK_NE(&from, this);
  const TimePartition* source =
      ::google::protobuf::DynamicCastToGenerated<TimePartition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TimePartition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TimePartition)
    MergeFrom(*source);
  }
}

void TimePartition::MergeFrom(const TimePartition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TimePartition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::flyteidl::core::LabelValue::MergeFrom(from.value());
  }
}

void TimePartition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TimePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimePartition::CopyFrom(const TimePartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TimePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePartition::IsInitialized() const {
  return true;
}

void TimePartition::Swap(TimePartition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimePartition::InternalSwap(TimePartition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata TimePartition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactID::InitAsDefaultInstance() {
  ::flyteidl::core::_ArtifactID_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::core::_ArtifactID_default_instance_._instance.get_mutable()->partitions_ = const_cast< ::flyteidl::core::Partitions*>(
      ::flyteidl::core::Partitions::internal_default_instance());
  ::flyteidl::core::_ArtifactID_default_instance_._instance.get_mutable()->time_partition_ = const_cast< ::flyteidl::core::TimePartition*>(
      ::flyteidl::core::TimePartition::internal_default_instance());
}
class ArtifactID::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const ArtifactID* msg);
  static const ::flyteidl::core::Partitions& partitions(const ArtifactID* msg);
  static const ::flyteidl::core::TimePartition& time_partition(const ArtifactID* msg);
};

const ::flyteidl::core::ArtifactKey&
ArtifactID::HasBitSetters::artifact_key(const ArtifactID* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::core::Partitions&
ArtifactID::HasBitSetters::partitions(const ArtifactID* msg) {
  return *msg->partitions_;
}
const ::flyteidl::core::TimePartition&
ArtifactID::HasBitSetters::time_partition(const ArtifactID* msg) {
  return *msg->time_partition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactID::kArtifactKeyFieldNumber;
const int ArtifactID::kVersionFieldNumber;
const int ArtifactID::kPartitionsFieldNumber;
const int ArtifactID::kTimePartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactID::ArtifactID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ArtifactID)
}
ArtifactID::ArtifactID(const ArtifactID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_partitions()) {
    partitions_ = new ::flyteidl::core::Partitions(*from.partitions_);
  } else {
    partitions_ = nullptr;
  }
  if (from.has_time_partition()) {
    time_partition_ = new ::flyteidl::core::TimePartition(*from.time_partition_);
  } else {
    time_partition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ArtifactID)
}

void ArtifactID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_partition_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(time_partition_));
}

ArtifactID::~ArtifactID() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ArtifactID)
  SharedDtor();
}

void ArtifactID::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete partitions_;
  if (this != internal_default_instance()) delete time_partition_;
}

void ArtifactID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactID& ArtifactID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactID_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void ArtifactID::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ArtifactID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && partitions_ != nullptr) {
    delete partitions_;
  }
  partitions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_partition_ != nullptr) {
    delete time_partition_;
  }
  time_partition_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactID.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Partitions partitions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Partitions::_InternalParse;
        object = msg->mutable_partitions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TimePartition time_partition = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TimePartition::_InternalParse;
        object = msg->mutable_time_partition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ArtifactID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactID.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Partitions partitions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TimePartition time_partition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_partition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ArtifactID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ArtifactID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ArtifactID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactID.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .flyteidl.core.Partitions partitions = 3;
  if (this->has_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::partitions(this), output);
  }

  // .flyteidl.core.TimePartition time_partition = 4;
  if (this->has_time_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::time_partition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ArtifactID)
}

::google::protobuf::uint8* ArtifactID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ArtifactID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactID.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // .flyteidl.core.Partitions partitions = 3;
  if (this->has_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::partitions(this), target);
  }

  // .flyteidl.core.TimePartition time_partition = 4;
  if (this->has_time_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::time_partition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ArtifactID)
  return target;
}

size_t ArtifactID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ArtifactID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.core.Partitions partitions = 3;
  if (this->has_partitions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *partitions_);
  }

  // .flyteidl.core.TimePartition time_partition = 4;
  if (this->has_time_partition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_partition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ArtifactID)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactID* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ArtifactID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ArtifactID)
    MergeFrom(*source);
  }
}

void ArtifactID::MergeFrom(const ArtifactID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ArtifactID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_partitions()) {
    mutable_partitions()->::flyteidl::core::Partitions::MergeFrom(from.partitions());
  }
  if (from.has_time_partition()) {
    mutable_time_partition()->::flyteidl::core::TimePartition::MergeFrom(from.time_partition());
  }
}

void ArtifactID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ArtifactID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactID::CopyFrom(const ArtifactID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ArtifactID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactID::IsInitialized() const {
  return true;
}

void ArtifactID::Swap(ArtifactID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactID::InternalSwap(ArtifactID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(artifact_key_, other->artifact_key_);
  swap(partitions_, other->partitions_);
  swap(time_partition_, other->time_partition_);
}

::google::protobuf::Metadata ArtifactID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactTag::InitAsDefaultInstance() {
  ::flyteidl::core::_ArtifactTag_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::core::_ArtifactTag_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::LabelValue*>(
      ::flyteidl::core::LabelValue::internal_default_instance());
}
class ArtifactTag::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const ArtifactTag* msg);
  static const ::flyteidl::core::LabelValue& value(const ArtifactTag* msg);
};

const ::flyteidl::core::ArtifactKey&
ArtifactTag::HasBitSetters::artifact_key(const ArtifactTag* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::core::LabelValue&
ArtifactTag::HasBitSetters::value(const ArtifactTag* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactTag::kArtifactKeyFieldNumber;
const int ArtifactTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactTag::ArtifactTag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ArtifactTag)
}
ArtifactTag::ArtifactTag(const ArtifactTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::LabelValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ArtifactTag)
}

void ArtifactTag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(value_));
}

ArtifactTag::~ArtifactTag() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ArtifactTag)
  SharedDtor();
}

void ArtifactTag::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete value_;
}

void ArtifactTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactTag& ArtifactTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactTag_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void ArtifactTag::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ArtifactTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactTag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactTag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LabelValue value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LabelValue::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ArtifactTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LabelValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ArtifactTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ArtifactTag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ArtifactTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.core.LabelValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ArtifactTag)
}

::google::protobuf::uint8* ArtifactTag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ArtifactTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.core.LabelValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ArtifactTag)
  return target;
}

size_t ArtifactTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ArtifactTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.core.LabelValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ArtifactTag)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactTag* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ArtifactTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ArtifactTag)
    MergeFrom(*source);
  }
}

void ArtifactTag::MergeFrom(const ArtifactTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ArtifactTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::LabelValue::MergeFrom(from.value());
  }
}

void ArtifactTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ArtifactTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactTag::CopyFrom(const ArtifactTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ArtifactTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactTag::IsInitialized() const {
  return true;
}

void ArtifactTag::Swap(ArtifactTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactTag::InternalSwap(ArtifactTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_key_, other->artifact_key_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata ArtifactTag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactQuery::InitAsDefaultInstance() {
  ::flyteidl::core::_ArtifactQuery_default_instance_.artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
  ::flyteidl::core::_ArtifactQuery_default_instance_.artifact_tag_ = const_cast< ::flyteidl::core::ArtifactTag*>(
      ::flyteidl::core::ArtifactTag::internal_default_instance());
  ::flyteidl::core::_ArtifactQuery_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::core::_ArtifactQuery_default_instance_.binding_ = const_cast< ::flyteidl::core::ArtifactBindingData*>(
      ::flyteidl::core::ArtifactBindingData::internal_default_instance());
}
class ArtifactQuery::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const ArtifactQuery* msg);
  static const ::flyteidl::core::ArtifactTag& artifact_tag(const ArtifactQuery* msg);
  static const ::flyteidl::core::ArtifactBindingData& binding(const ArtifactQuery* msg);
};

const ::flyteidl::core::ArtifactID&
ArtifactQuery::HasBitSetters::artifact_id(const ArtifactQuery* msg) {
  return *msg->identifier_.artifact_id_;
}
const ::flyteidl::core::ArtifactTag&
ArtifactQuery::HasBitSetters::artifact_tag(const ArtifactQuery* msg) {
  return *msg->identifier_.artifact_tag_;
}
const ::flyteidl::core::ArtifactBindingData&
ArtifactQuery::HasBitSetters::binding(const ArtifactQuery* msg) {
  return *msg->identifier_.binding_;
}
void ArtifactQuery::set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    set_has_artifact_id();
    identifier_.artifact_id_ = artifact_id;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ArtifactQuery.artifact_id)
}
void ArtifactQuery::set_allocated_artifact_tag(::flyteidl::core::ArtifactTag* artifact_tag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (artifact_tag) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_tag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_tag, submessage_arena);
    }
    set_has_artifact_tag();
    identifier_.artifact_tag_ = artifact_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ArtifactQuery.artifact_tag)
}
void ArtifactQuery::set_allocated_binding(::flyteidl::core::ArtifactBindingData* binding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (binding) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    set_has_binding();
    identifier_.binding_ = binding;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ArtifactQuery.binding)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactQuery::kArtifactIdFieldNumber;
const int ArtifactQuery::kArtifactTagFieldNumber;
const int ArtifactQuery::kUriFieldNumber;
const int ArtifactQuery::kBindingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactQuery::ArtifactQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ArtifactQuery)
}
ArtifactQuery::ArtifactQuery(const ArtifactQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kArtifactId: {
      mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
      break;
    }
    case kArtifactTag: {
      mutable_artifact_tag()->::flyteidl::core::ArtifactTag::MergeFrom(from.artifact_tag());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kBinding: {
      mutable_binding()->::flyteidl::core::ArtifactBindingData::MergeFrom(from.binding());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ArtifactQuery)
}

void ArtifactQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  clear_has_identifier();
}

ArtifactQuery::~ArtifactQuery() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ArtifactQuery)
  SharedDtor();
}

void ArtifactQuery::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
}

void ArtifactQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactQuery& ArtifactQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactQuery_flyteidl_2fcore_2fartifact_5fid_2eproto.base);
  return *internal_default_instance();
}


void ArtifactQuery::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.ArtifactQuery)
  switch (identifier_case()) {
    case kArtifactId: {
      delete identifier_.artifact_id_;
      break;
    }
    case kArtifactTag: {
      delete identifier_.artifact_tag_;
      break;
    }
    case kUri: {
      identifier_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBinding: {
      delete identifier_.binding_;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void ArtifactQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ArtifactQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_identifier();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ArtifactTag artifact_tag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactTag::_InternalParse;
        object = msg->mutable_artifact_tag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string uri = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ArtifactQuery.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.ArtifactBindingData binding = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactBindingData::_InternalParse;
        object = msg->mutable_binding();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ArtifactQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactTag artifact_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ArtifactQuery.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactBindingData binding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_binding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ArtifactQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ArtifactQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ArtifactQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // .flyteidl.core.ArtifactTag artifact_tag = 2;
  if (has_artifact_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::artifact_tag(this), output);
  }

  // string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactQuery.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // .flyteidl.core.ArtifactBindingData binding = 4;
  if (has_binding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::binding(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ArtifactQuery)
}

::google::protobuf::uint8* ArtifactQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ArtifactQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // .flyteidl.core.ArtifactTag artifact_tag = 2;
  if (has_artifact_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::artifact_tag(this), target);
  }

  // string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ArtifactQuery.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // .flyteidl.core.ArtifactBindingData binding = 4;
  if (has_binding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::binding(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ArtifactQuery)
  return target;
}

size_t ArtifactQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ArtifactQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (identifier_case()) {
    // .flyteidl.core.ArtifactID artifact_id = 1;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.artifact_id_);
      break;
    }
    // .flyteidl.core.ArtifactTag artifact_tag = 2;
    case kArtifactTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.artifact_tag_);
      break;
    }
    // string uri = 3;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    // .flyteidl.core.ArtifactBindingData binding = 4;
    case kBinding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.binding_);
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ArtifactQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactQuery* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ArtifactQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ArtifactQuery)
    MergeFrom(*source);
  }
}

void ArtifactQuery::MergeFrom(const ArtifactQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ArtifactQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.identifier_case()) {
    case kArtifactId: {
      mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
      break;
    }
    case kArtifactTag: {
      mutable_artifact_tag()->::flyteidl::core::ArtifactTag::MergeFrom(from.artifact_tag());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kBinding: {
      mutable_binding()->::flyteidl::core::ArtifactBindingData::MergeFrom(from.binding());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
}

void ArtifactQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ArtifactQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactQuery::CopyFrom(const ArtifactQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ArtifactQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactQuery::IsInitialized() const {
  return true;
}

void ArtifactQuery::Swap(ArtifactQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactQuery::InternalSwap(ArtifactQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ArtifactQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fartifact_5fid_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fartifact_5fid_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::ArtifactKey* Arena::CreateMaybeMessage< ::flyteidl::core::ArtifactKey >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ArtifactKey >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ArtifactBindingData* Arena::CreateMaybeMessage< ::flyteidl::core::ArtifactBindingData >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ArtifactBindingData >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::InputBindingData* Arena::CreateMaybeMessage< ::flyteidl::core::InputBindingData >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::InputBindingData >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::LabelValue* Arena::CreateMaybeMessage< ::flyteidl::core::LabelValue >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::LabelValue >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Partitions_ValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::Partitions_ValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Partitions_ValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Partitions* Arena::CreateMaybeMessage< ::flyteidl::core::Partitions >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Partitions >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TimePartition* Arena::CreateMaybeMessage< ::flyteidl::core::TimePartition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TimePartition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ArtifactID* Arena::CreateMaybeMessage< ::flyteidl::core::ArtifactID >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ArtifactID >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ArtifactTag* Arena::CreateMaybeMessage< ::flyteidl::core::ArtifactTag >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ArtifactTag >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ArtifactQuery* Arena::CreateMaybeMessage< ::flyteidl::core::ArtifactQuery >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ArtifactQuery >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
