// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/cloudevents.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/event/event.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/artifact_id.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fcloudevents_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fcloudevents_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto();
namespace flyteidl {
namespace event {
class CloudEventExecutionStart;
class CloudEventExecutionStartDefaultTypeInternal;
extern CloudEventExecutionStartDefaultTypeInternal _CloudEventExecutionStart_default_instance_;
class CloudEventNodeExecution;
class CloudEventNodeExecutionDefaultTypeInternal;
extern CloudEventNodeExecutionDefaultTypeInternal _CloudEventNodeExecution_default_instance_;
class CloudEventTaskExecution;
class CloudEventTaskExecutionDefaultTypeInternal;
extern CloudEventTaskExecutionDefaultTypeInternal _CloudEventTaskExecution_default_instance_;
class CloudEventWorkflowExecution;
class CloudEventWorkflowExecutionDefaultTypeInternal;
extern CloudEventWorkflowExecutionDefaultTypeInternal _CloudEventWorkflowExecution_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::CloudEventExecutionStart* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventExecutionStart>(Arena*);
template<> ::flyteidl::event::CloudEventNodeExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventNodeExecution>(Arena*);
template<> ::flyteidl::event::CloudEventTaskExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventTaskExecution>(Arena*);
template<> ::flyteidl::event::CloudEventWorkflowExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventWorkflowExecution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

// ===================================================================

class CloudEventWorkflowExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventWorkflowExecution) */ {
 public:
  CloudEventWorkflowExecution();
  virtual ~CloudEventWorkflowExecution();

  CloudEventWorkflowExecution(const CloudEventWorkflowExecution& from);

  inline CloudEventWorkflowExecution& operator=(const CloudEventWorkflowExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventWorkflowExecution(CloudEventWorkflowExecution&& from) noexcept
    : CloudEventWorkflowExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventWorkflowExecution& operator=(CloudEventWorkflowExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventWorkflowExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventWorkflowExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventWorkflowExecution*>(
               &_CloudEventWorkflowExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CloudEventWorkflowExecution* other);
  friend void swap(CloudEventWorkflowExecution& a, CloudEventWorkflowExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventWorkflowExecution* New() const final {
    return CreateMaybeMessage<CloudEventWorkflowExecution>(nullptr);
  }

  CloudEventWorkflowExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventWorkflowExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventWorkflowExecution& from);
  void MergeFrom(const CloudEventWorkflowExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventWorkflowExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactID artifact_ids = 3;
  int artifact_ids_size() const;
  void clear_artifact_ids();
  static const int kArtifactIdsFieldNumber = 3;
  ::flyteidl::core::ArtifactID* mutable_artifact_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
      mutable_artifact_ids();
  const ::flyteidl::core::ArtifactID& artifact_ids(int index) const;
  ::flyteidl::core::ArtifactID* add_artifact_ids();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
      artifact_ids() const;

  // string principal = 5;
  void clear_principal();
  static const int kPrincipalFieldNumber = 5;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::WorkflowExecutionEvent& raw_event() const;
  ::flyteidl::event::WorkflowExecutionEvent* release_raw_event();
  ::flyteidl::event::WorkflowExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::WorkflowExecutionEvent* raw_event);

  // .flyteidl.core.TypedInterface output_interface = 2;
  bool has_output_interface() const;
  void clear_output_interface();
  static const int kOutputInterfaceFieldNumber = 2;
  const ::flyteidl::core::TypedInterface& output_interface() const;
  ::flyteidl::core::TypedInterface* release_output_interface();
  ::flyteidl::core::TypedInterface* mutable_output_interface();
  void set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface);

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 4;
  bool has_reference_execution() const;
  void clear_reference_execution();
  static const int kReferenceExecutionFieldNumber = 4;
  const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_reference_execution();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_reference_execution();
  void set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution);

  // .flyteidl.core.Identifier launch_plan_id = 6;
  bool has_launch_plan_id() const;
  void clear_launch_plan_id();
  static const int kLaunchPlanIdFieldNumber = 6;
  const ::flyteidl::core::Identifier& launch_plan_id() const;
  ::flyteidl::core::Identifier* release_launch_plan_id();
  ::flyteidl::core::Identifier* mutable_launch_plan_id();
  void set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventWorkflowExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID > artifact_ids_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::flyteidl::event::WorkflowExecutionEvent* raw_event_;
  ::flyteidl::core::TypedInterface* output_interface_;
  ::flyteidl::core::WorkflowExecutionIdentifier* reference_execution_;
  ::flyteidl::core::Identifier* launch_plan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// -------------------------------------------------------------------

class CloudEventNodeExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventNodeExecution) */ {
 public:
  CloudEventNodeExecution();
  virtual ~CloudEventNodeExecution();

  CloudEventNodeExecution(const CloudEventNodeExecution& from);

  inline CloudEventNodeExecution& operator=(const CloudEventNodeExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventNodeExecution(CloudEventNodeExecution&& from) noexcept
    : CloudEventNodeExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventNodeExecution& operator=(CloudEventNodeExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventNodeExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventNodeExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventNodeExecution*>(
               &_CloudEventNodeExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CloudEventNodeExecution* other);
  friend void swap(CloudEventNodeExecution& a, CloudEventNodeExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventNodeExecution* New() const final {
    return CreateMaybeMessage<CloudEventNodeExecution>(nullptr);
  }

  CloudEventNodeExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventNodeExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventNodeExecution& from);
  void MergeFrom(const CloudEventNodeExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventNodeExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactID artifact_ids = 4;
  int artifact_ids_size() const;
  void clear_artifact_ids();
  static const int kArtifactIdsFieldNumber = 4;
  ::flyteidl::core::ArtifactID* mutable_artifact_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
      mutable_artifact_ids();
  const ::flyteidl::core::ArtifactID& artifact_ids(int index) const;
  ::flyteidl::core::ArtifactID* add_artifact_ids();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
      artifact_ids() const;

  // string principal = 5;
  void clear_principal();
  static const int kPrincipalFieldNumber = 5;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .flyteidl.event.NodeExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::NodeExecutionEvent& raw_event() const;
  ::flyteidl::event::NodeExecutionEvent* release_raw_event();
  ::flyteidl::event::NodeExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::NodeExecutionEvent* raw_event);

  // .flyteidl.core.TaskExecutionIdentifier task_exec_id = 2;
  bool has_task_exec_id() const;
  void clear_task_exec_id();
  static const int kTaskExecIdFieldNumber = 2;
  const ::flyteidl::core::TaskExecutionIdentifier& task_exec_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_task_exec_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_task_exec_id();
  void set_allocated_task_exec_id(::flyteidl::core::TaskExecutionIdentifier* task_exec_id);

  // .flyteidl.core.TypedInterface output_interface = 3;
  bool has_output_interface() const;
  void clear_output_interface();
  static const int kOutputInterfaceFieldNumber = 3;
  const ::flyteidl::core::TypedInterface& output_interface() const;
  ::flyteidl::core::TypedInterface* release_output_interface();
  ::flyteidl::core::TypedInterface* mutable_output_interface();
  void set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface);

  // .flyteidl.core.Identifier launch_plan_id = 6;
  bool has_launch_plan_id() const;
  void clear_launch_plan_id();
  static const int kLaunchPlanIdFieldNumber = 6;
  const ::flyteidl::core::Identifier& launch_plan_id() const;
  ::flyteidl::core::Identifier* release_launch_plan_id();
  ::flyteidl::core::Identifier* mutable_launch_plan_id();
  void set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventNodeExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID > artifact_ids_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::flyteidl::event::NodeExecutionEvent* raw_event_;
  ::flyteidl::core::TaskExecutionIdentifier* task_exec_id_;
  ::flyteidl::core::TypedInterface* output_interface_;
  ::flyteidl::core::Identifier* launch_plan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// -------------------------------------------------------------------

class CloudEventTaskExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventTaskExecution) */ {
 public:
  CloudEventTaskExecution();
  virtual ~CloudEventTaskExecution();

  CloudEventTaskExecution(const CloudEventTaskExecution& from);

  inline CloudEventTaskExecution& operator=(const CloudEventTaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventTaskExecution(CloudEventTaskExecution&& from) noexcept
    : CloudEventTaskExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventTaskExecution& operator=(CloudEventTaskExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventTaskExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventTaskExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventTaskExecution*>(
               &_CloudEventTaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CloudEventTaskExecution* other);
  friend void swap(CloudEventTaskExecution& a, CloudEventTaskExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventTaskExecution* New() const final {
    return CreateMaybeMessage<CloudEventTaskExecution>(nullptr);
  }

  CloudEventTaskExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventTaskExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventTaskExecution& from);
  void MergeFrom(const CloudEventTaskExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventTaskExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.event.TaskExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::TaskExecutionEvent& raw_event() const;
  ::flyteidl::event::TaskExecutionEvent* release_raw_event();
  ::flyteidl::event::TaskExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::TaskExecutionEvent* raw_event);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventTaskExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::event::TaskExecutionEvent* raw_event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// -------------------------------------------------------------------

class CloudEventExecutionStart final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventExecutionStart) */ {
 public:
  CloudEventExecutionStart();
  virtual ~CloudEventExecutionStart();

  CloudEventExecutionStart(const CloudEventExecutionStart& from);

  inline CloudEventExecutionStart& operator=(const CloudEventExecutionStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventExecutionStart(CloudEventExecutionStart&& from) noexcept
    : CloudEventExecutionStart() {
    *this = ::std::move(from);
  }

  inline CloudEventExecutionStart& operator=(CloudEventExecutionStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventExecutionStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventExecutionStart* internal_default_instance() {
    return reinterpret_cast<const CloudEventExecutionStart*>(
               &_CloudEventExecutionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CloudEventExecutionStart* other);
  friend void swap(CloudEventExecutionStart& a, CloudEventExecutionStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventExecutionStart* New() const final {
    return CreateMaybeMessage<CloudEventExecutionStart>(nullptr);
  }

  CloudEventExecutionStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventExecutionStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventExecutionStart& from);
  void MergeFrom(const CloudEventExecutionStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventExecutionStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactID artifact_ids = 4;
  int artifact_ids_size() const;
  void clear_artifact_ids();
  static const int kArtifactIdsFieldNumber = 4;
  ::flyteidl::core::ArtifactID* mutable_artifact_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
      mutable_artifact_ids();
  const ::flyteidl::core::ArtifactID& artifact_ids(int index) const;
  ::flyteidl::core::ArtifactID* add_artifact_ids();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
      artifact_ids() const;

  // repeated string artifact_trackers = 5;
  int artifact_trackers_size() const;
  void clear_artifact_trackers();
  static const int kArtifactTrackersFieldNumber = 5;
  const ::std::string& artifact_trackers(int index) const;
  ::std::string* mutable_artifact_trackers(int index);
  void set_artifact_trackers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_artifact_trackers(int index, ::std::string&& value);
  #endif
  void set_artifact_trackers(int index, const char* value);
  void set_artifact_trackers(int index, const char* value, size_t size);
  ::std::string* add_artifact_trackers();
  void add_artifact_trackers(const ::std::string& value);
  #if LANG_CXX11
  void add_artifact_trackers(::std::string&& value);
  #endif
  void add_artifact_trackers(const char* value);
  void add_artifact_trackers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& artifact_trackers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_artifact_trackers();

  // string principal = 6;
  void clear_principal();
  static const int kPrincipalFieldNumber = 6;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  bool has_execution_id() const;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);

  // .flyteidl.core.Identifier launch_plan_id = 2;
  bool has_launch_plan_id() const;
  void clear_launch_plan_id();
  static const int kLaunchPlanIdFieldNumber = 2;
  const ::flyteidl::core::Identifier& launch_plan_id() const;
  ::flyteidl::core::Identifier* release_launch_plan_id();
  ::flyteidl::core::Identifier* mutable_launch_plan_id();
  void set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id);

  // .flyteidl.core.Identifier workflow_id = 3;
  bool has_workflow_id() const;
  void clear_workflow_id();
  static const int kWorkflowIdFieldNumber = 3;
  const ::flyteidl::core::Identifier& workflow_id() const;
  ::flyteidl::core::Identifier* release_workflow_id();
  ::flyteidl::core::Identifier* mutable_workflow_id();
  void set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventExecutionStart)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID > artifact_ids_;
  ::google::protobuf::RepeatedPtrField<::std::string> artifact_trackers_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  ::flyteidl::core::Identifier* launch_plan_id_;
  ::flyteidl::core::Identifier* workflow_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudEventWorkflowExecution

// .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
inline bool CloudEventWorkflowExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::WorkflowExecutionEvent& CloudEventWorkflowExecution::raw_event() const {
  const ::flyteidl::event::WorkflowExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::WorkflowExecutionEvent*>(
      &::flyteidl::event::_WorkflowExecutionEvent_default_instance_);
}
inline ::flyteidl::event::WorkflowExecutionEvent* CloudEventWorkflowExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  
  ::flyteidl::event::WorkflowExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::WorkflowExecutionEvent* CloudEventWorkflowExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::WorkflowExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  return raw_event_;
}
inline void CloudEventWorkflowExecution::set_allocated_raw_event(::flyteidl::event::WorkflowExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.raw_event)
}

// .flyteidl.core.TypedInterface output_interface = 2;
inline bool CloudEventWorkflowExecution::has_output_interface() const {
  return this != internal_default_instance() && output_interface_ != nullptr;
}
inline const ::flyteidl::core::TypedInterface& CloudEventWorkflowExecution::output_interface() const {
  const ::flyteidl::core::TypedInterface* p = output_interface_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* CloudEventWorkflowExecution::release_output_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  
  ::flyteidl::core::TypedInterface* temp = output_interface_;
  output_interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* CloudEventWorkflowExecution::mutable_output_interface() {
  
  if (output_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaNoVirtual());
    output_interface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  return output_interface_;
}
inline void CloudEventWorkflowExecution::set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_interface_);
  }
  if (output_interface) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_interface, submessage_arena);
    }
    
  } else {
    
  }
  output_interface_ = output_interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.output_interface)
}

// repeated .flyteidl.core.ArtifactID artifact_ids = 3;
inline int CloudEventWorkflowExecution::artifact_ids_size() const {
  return artifact_ids_.size();
}
inline ::flyteidl::core::ArtifactID* CloudEventWorkflowExecution::mutable_artifact_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
CloudEventWorkflowExecution::mutable_artifact_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return &artifact_ids_;
}
inline const ::flyteidl::core::ArtifactID& CloudEventWorkflowExecution::artifact_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Get(index);
}
inline ::flyteidl::core::ArtifactID* CloudEventWorkflowExecution::add_artifact_ids() {
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
CloudEventWorkflowExecution::artifact_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_;
}

// .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 4;
inline bool CloudEventWorkflowExecution::has_reference_execution() const {
  return this != internal_default_instance() && reference_execution_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& CloudEventWorkflowExecution::reference_execution() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = reference_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventWorkflowExecution::release_reference_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = reference_execution_;
  reference_execution_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventWorkflowExecution::mutable_reference_execution() {
  
  if (reference_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    reference_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  return reference_execution_;
}
inline void CloudEventWorkflowExecution::set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_execution_);
  }
  if (reference_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_execution, submessage_arena);
    }
    
  } else {
    
  }
  reference_execution_ = reference_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
}

// string principal = 5;
inline void CloudEventWorkflowExecution::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventWorkflowExecution::principal() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.principal)
  return principal_.GetNoArena();
}
inline void CloudEventWorkflowExecution::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.CloudEventWorkflowExecution.principal)
}
#if LANG_CXX11
inline void CloudEventWorkflowExecution::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.CloudEventWorkflowExecution.principal)
}
#endif
inline void CloudEventWorkflowExecution::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.CloudEventWorkflowExecution.principal)
}
inline void CloudEventWorkflowExecution::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.CloudEventWorkflowExecution.principal)
}
inline ::std::string* CloudEventWorkflowExecution::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventWorkflowExecution::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventWorkflowExecution::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.principal)
}

// .flyteidl.core.Identifier launch_plan_id = 6;
inline bool CloudEventWorkflowExecution::has_launch_plan_id() const {
  return this != internal_default_instance() && launch_plan_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& CloudEventWorkflowExecution::launch_plan_id() const {
  const ::flyteidl::core::Identifier* p = launch_plan_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.launch_plan_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* CloudEventWorkflowExecution::release_launch_plan_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.launch_plan_id)
  
  ::flyteidl::core::Identifier* temp = launch_plan_id_;
  launch_plan_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* CloudEventWorkflowExecution::mutable_launch_plan_id() {
  
  if (launch_plan_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    launch_plan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.launch_plan_id)
  return launch_plan_id_;
}
inline void CloudEventWorkflowExecution::set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launch_plan_id_);
  }
  if (launch_plan_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan_id, submessage_arena);
    }
    
  } else {
    
  }
  launch_plan_id_ = launch_plan_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.launch_plan_id)
}

// -------------------------------------------------------------------

// CloudEventNodeExecution

// .flyteidl.event.NodeExecutionEvent raw_event = 1;
inline bool CloudEventNodeExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::NodeExecutionEvent& CloudEventNodeExecution::raw_event() const {
  const ::flyteidl::event::NodeExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::NodeExecutionEvent*>(
      &::flyteidl::event::_NodeExecutionEvent_default_instance_);
}
inline ::flyteidl::event::NodeExecutionEvent* CloudEventNodeExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.raw_event)
  
  ::flyteidl::event::NodeExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::NodeExecutionEvent* CloudEventNodeExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::NodeExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.raw_event)
  return raw_event_;
}
inline void CloudEventNodeExecution::set_allocated_raw_event(::flyteidl::event::NodeExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.raw_event)
}

// .flyteidl.core.TaskExecutionIdentifier task_exec_id = 2;
inline bool CloudEventNodeExecution::has_task_exec_id() const {
  return this != internal_default_instance() && task_exec_id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& CloudEventNodeExecution::task_exec_id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = task_exec_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.task_exec_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* CloudEventNodeExecution::release_task_exec_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.task_exec_id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = task_exec_id_;
  task_exec_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* CloudEventNodeExecution::mutable_task_exec_id() {
  
  if (task_exec_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    task_exec_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.task_exec_id)
  return task_exec_id_;
}
inline void CloudEventNodeExecution::set_allocated_task_exec_id(::flyteidl::core::TaskExecutionIdentifier* task_exec_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_exec_id_);
  }
  if (task_exec_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_exec_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_exec_id, submessage_arena);
    }
    
  } else {
    
  }
  task_exec_id_ = task_exec_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.task_exec_id)
}

// .flyteidl.core.TypedInterface output_interface = 3;
inline bool CloudEventNodeExecution::has_output_interface() const {
  return this != internal_default_instance() && output_interface_ != nullptr;
}
inline const ::flyteidl::core::TypedInterface& CloudEventNodeExecution::output_interface() const {
  const ::flyteidl::core::TypedInterface* p = output_interface_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.output_interface)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* CloudEventNodeExecution::release_output_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.output_interface)
  
  ::flyteidl::core::TypedInterface* temp = output_interface_;
  output_interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* CloudEventNodeExecution::mutable_output_interface() {
  
  if (output_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaNoVirtual());
    output_interface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.output_interface)
  return output_interface_;
}
inline void CloudEventNodeExecution::set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_interface_);
  }
  if (output_interface) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_interface, submessage_arena);
    }
    
  } else {
    
  }
  output_interface_ = output_interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.output_interface)
}

// repeated .flyteidl.core.ArtifactID artifact_ids = 4;
inline int CloudEventNodeExecution::artifact_ids_size() const {
  return artifact_ids_.size();
}
inline ::flyteidl::core::ArtifactID* CloudEventNodeExecution::mutable_artifact_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.artifact_ids)
  return artifact_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
CloudEventNodeExecution::mutable_artifact_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventNodeExecution.artifact_ids)
  return &artifact_ids_;
}
inline const ::flyteidl::core::ArtifactID& CloudEventNodeExecution::artifact_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.artifact_ids)
  return artifact_ids_.Get(index);
}
inline ::flyteidl::core::ArtifactID* CloudEventNodeExecution::add_artifact_ids() {
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventNodeExecution.artifact_ids)
  return artifact_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
CloudEventNodeExecution::artifact_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventNodeExecution.artifact_ids)
  return artifact_ids_;
}

// string principal = 5;
inline void CloudEventNodeExecution::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventNodeExecution::principal() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.principal)
  return principal_.GetNoArena();
}
inline void CloudEventNodeExecution::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.CloudEventNodeExecution.principal)
}
#if LANG_CXX11
inline void CloudEventNodeExecution::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.CloudEventNodeExecution.principal)
}
#endif
inline void CloudEventNodeExecution::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.CloudEventNodeExecution.principal)
}
inline void CloudEventNodeExecution::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.CloudEventNodeExecution.principal)
}
inline ::std::string* CloudEventNodeExecution::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventNodeExecution::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventNodeExecution::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.principal)
}

// .flyteidl.core.Identifier launch_plan_id = 6;
inline bool CloudEventNodeExecution::has_launch_plan_id() const {
  return this != internal_default_instance() && launch_plan_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& CloudEventNodeExecution::launch_plan_id() const {
  const ::flyteidl::core::Identifier* p = launch_plan_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.launch_plan_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* CloudEventNodeExecution::release_launch_plan_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.launch_plan_id)
  
  ::flyteidl::core::Identifier* temp = launch_plan_id_;
  launch_plan_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* CloudEventNodeExecution::mutable_launch_plan_id() {
  
  if (launch_plan_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    launch_plan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.launch_plan_id)
  return launch_plan_id_;
}
inline void CloudEventNodeExecution::set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launch_plan_id_);
  }
  if (launch_plan_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan_id, submessage_arena);
    }
    
  } else {
    
  }
  launch_plan_id_ = launch_plan_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.launch_plan_id)
}

// -------------------------------------------------------------------

// CloudEventTaskExecution

// .flyteidl.event.TaskExecutionEvent raw_event = 1;
inline bool CloudEventTaskExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::TaskExecutionEvent& CloudEventTaskExecution::raw_event() const {
  const ::flyteidl::event::TaskExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::TaskExecutionEvent*>(
      &::flyteidl::event::_TaskExecutionEvent_default_instance_);
}
inline ::flyteidl::event::TaskExecutionEvent* CloudEventTaskExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.raw_event)
  
  ::flyteidl::event::TaskExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionEvent* CloudEventTaskExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.raw_event)
  return raw_event_;
}
inline void CloudEventTaskExecution::set_allocated_raw_event(::flyteidl::event::TaskExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.raw_event)
}

// -------------------------------------------------------------------

// CloudEventExecutionStart

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
inline bool CloudEventExecutionStart::has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& CloudEventExecutionStart::execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventExecutionStart::release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventExecutionStart.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventExecutionStart::mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.execution_id)
  return execution_id_;
}
inline void CloudEventExecutionStart::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventExecutionStart.execution_id)
}

// .flyteidl.core.Identifier launch_plan_id = 2;
inline bool CloudEventExecutionStart::has_launch_plan_id() const {
  return this != internal_default_instance() && launch_plan_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& CloudEventExecutionStart::launch_plan_id() const {
  const ::flyteidl::core::Identifier* p = launch_plan_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.launch_plan_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* CloudEventExecutionStart::release_launch_plan_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventExecutionStart.launch_plan_id)
  
  ::flyteidl::core::Identifier* temp = launch_plan_id_;
  launch_plan_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* CloudEventExecutionStart::mutable_launch_plan_id() {
  
  if (launch_plan_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    launch_plan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.launch_plan_id)
  return launch_plan_id_;
}
inline void CloudEventExecutionStart::set_allocated_launch_plan_id(::flyteidl::core::Identifier* launch_plan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launch_plan_id_);
  }
  if (launch_plan_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launch_plan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan_id, submessage_arena);
    }
    
  } else {
    
  }
  launch_plan_id_ = launch_plan_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventExecutionStart.launch_plan_id)
}

// .flyteidl.core.Identifier workflow_id = 3;
inline bool CloudEventExecutionStart::has_workflow_id() const {
  return this != internal_default_instance() && workflow_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& CloudEventExecutionStart::workflow_id() const {
  const ::flyteidl::core::Identifier* p = workflow_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.workflow_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* CloudEventExecutionStart::release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventExecutionStart.workflow_id)
  
  ::flyteidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* CloudEventExecutionStart::mutable_workflow_id() {
  
  if (workflow_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    workflow_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.workflow_id)
  return workflow_id_;
}
inline void CloudEventExecutionStart::set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_id_);
  }
  if (workflow_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_id_ = workflow_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventExecutionStart.workflow_id)
}

// repeated .flyteidl.core.ArtifactID artifact_ids = 4;
inline int CloudEventExecutionStart::artifact_ids_size() const {
  return artifact_ids_.size();
}
inline ::flyteidl::core::ArtifactID* CloudEventExecutionStart::mutable_artifact_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.artifact_ids)
  return artifact_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
CloudEventExecutionStart::mutable_artifact_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventExecutionStart.artifact_ids)
  return &artifact_ids_;
}
inline const ::flyteidl::core::ArtifactID& CloudEventExecutionStart::artifact_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.artifact_ids)
  return artifact_ids_.Get(index);
}
inline ::flyteidl::core::ArtifactID* CloudEventExecutionStart::add_artifact_ids() {
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventExecutionStart.artifact_ids)
  return artifact_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
CloudEventExecutionStart::artifact_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventExecutionStart.artifact_ids)
  return artifact_ids_;
}

// repeated string artifact_trackers = 5;
inline int CloudEventExecutionStart::artifact_trackers_size() const {
  return artifact_trackers_.size();
}
inline void CloudEventExecutionStart::clear_artifact_trackers() {
  artifact_trackers_.Clear();
}
inline const ::std::string& CloudEventExecutionStart::artifact_trackers(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  return artifact_trackers_.Get(index);
}
inline ::std::string* CloudEventExecutionStart::mutable_artifact_trackers(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  return artifact_trackers_.Mutable(index);
}
inline void CloudEventExecutionStart::set_artifact_trackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  artifact_trackers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CloudEventExecutionStart::set_artifact_trackers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  artifact_trackers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CloudEventExecutionStart::set_artifact_trackers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  artifact_trackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
inline void CloudEventExecutionStart::set_artifact_trackers(int index, const char* value, size_t size) {
  artifact_trackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
inline ::std::string* CloudEventExecutionStart::add_artifact_trackers() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  return artifact_trackers_.Add();
}
inline void CloudEventExecutionStart::add_artifact_trackers(const ::std::string& value) {
  artifact_trackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
#if LANG_CXX11
inline void CloudEventExecutionStart::add_artifact_trackers(::std::string&& value) {
  artifact_trackers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
#endif
inline void CloudEventExecutionStart::add_artifact_trackers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  artifact_trackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
inline void CloudEventExecutionStart::add_artifact_trackers(const char* value, size_t size) {
  artifact_trackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CloudEventExecutionStart::artifact_trackers() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  return artifact_trackers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CloudEventExecutionStart::mutable_artifact_trackers() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventExecutionStart.artifact_trackers)
  return &artifact_trackers_;
}

// string principal = 6;
inline void CloudEventExecutionStart::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventExecutionStart::principal() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventExecutionStart.principal)
  return principal_.GetNoArena();
}
inline void CloudEventExecutionStart::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.CloudEventExecutionStart.principal)
}
#if LANG_CXX11
inline void CloudEventExecutionStart::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.CloudEventExecutionStart.principal)
}
#endif
inline void CloudEventExecutionStart::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.CloudEventExecutionStart.principal)
}
inline void CloudEventExecutionStart::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.CloudEventExecutionStart.principal)
}
inline ::std::string* CloudEventExecutionStart::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventExecutionStart.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventExecutionStart::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventExecutionStart.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventExecutionStart::set_allocated_principal(::std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventExecutionStart.principal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto
